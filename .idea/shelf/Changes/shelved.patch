Index: play2learn/src/app/games/translation/[uuid]/TranslationGameComponent.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"use client\";\r\n\r\nimport {AuthenticatorContext} from \"@/contexts/AuthenticatorContext\";\r\nimport Link from \"next/link\"\r\nimport {useContext, useEffect, useState} from \"react\";\r\nimport {useParams, useRouter} from \"next/navigation\";\r\nimport {useTranslation} from \"@/hooks/useTranslation\";\r\nimport socket from \"@/services/websockets/socket\";\r\nimport {apiRequest} from \"@/services/communicationManager/apiRequest\";\r\nimport {auto} from \"openai/_shims/registry\";\r\nimport {Clock3} from \"lucide-react\";\r\n\r\ninterface Language {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\ninterface LanguageLevel {\r\n    id: number;\r\n    language_id: number;\r\n    language: Language;\r\n    level: string;\r\n}\r\n\r\ninterface User {\r\n    id: number;\r\n    name: string;\r\n    profile_pic: string;\r\n}\r\n\r\ninterface Participant {\r\n    id: number;\r\n    user_id: number\r\n    user: User;\r\n    rol: string;\r\n    points: number;\r\n}\r\n\r\ninterface Player extends Participant {\r\n    isActive: boolean;\r\n    localPoints: number;\r\n}\r\n\r\ninterface Game {\r\n    id: number;\r\n    id_level_language: number;\r\n    language_level: LanguageLevel;\r\n    uuid: string;\r\n    password: string;\r\n    name: string;\r\n    n_rounds: number;\r\n    max_clues: number;\r\n    max_time: number;\r\n    max_players: number;\r\n    participants: Participant[] | null;\r\n}\r\n\r\n\r\nfunction TranslationGameComponent({participants, game}: { participants: Participant[]; game: Game }) {\r\n\r\n    const router = useRouter();\r\n    const params = useParams<{ uuid: string }>();\r\n    const {isAuthenticated, token, user} = useContext(AuthenticatorContext);\r\n    const [players, setPlayers] = useState<Player[]>([]);\r\n    const [room, setRoom] = useState<Game>()\r\n    const [acertado, setAcertado] = useState(false);\r\n    const [respuesta, setRespuesta] = useState(\"\");\r\n    const [palabraActual, setPalabraActual] = useState('');\r\n    const [oldWord, setOldWord] = useState<string | null>(null);\r\n    const [worldClient, setWordClient] = useState<string | null>(null);\r\n    const [wordTranslate, setWordTranslate] = useState('');\r\n    const [localPlayer, setLocalPlayer] = useState<Player>({} as Player);\r\n    const [timer, setTimer] = useState(game.max_time);\r\n    const [gameStarted, setGameStarted] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState<string | null>(null);\r\n    const [correctMessage, setCorrectMessage] = useState<string | null>(null);\r\n    const [myTurn, setMyTurn] = useState(false);\r\n    const [roundCount, setRoundCount] = useState(0);\r\n    const [maxRound, setMaxRound] = useState(game.n_rounds || 0);\r\n\r\n\r\n    const endGame = () => {\r\n\r\n        console.log(\"Ronda actual:\", roundCount, \"/\", maxRound);\r\n\r\n        if (participants.find((p) => p.rol === 'host')?.user_id === user?.id) {\r\n            // Primero realiza la llamada a la API con los datos simplificados\r\n            apiRequest(\"/game/store/stats\", \"POST\", {players: players})\r\n                .then((response) => {\r\n                    console.log(response);\r\n                    console.log(\"EMIT DE SHOWLEADER\");\r\n\r\n                    // Luego envía solo los datos necesarios a través de socket.io\r\n                    socket.emit(\"showLeader\", {token: token, roomUUID: game.uuid});\r\n\r\n                    console.log(\"todos terminaron\");\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                });\r\n\r\n        }\r\n        return;\r\n    };\r\n\r\n    function nextPlayer() {\r\n        const currentIndex = players.find(p => p.isActive);\r\n\r\n        if (!currentIndex) {\r\n            console.error(\"No se encontró ningún jugador activo.\");\r\n            return;\r\n        }\r\n\r\n        setMyTurn(currentIndex.user_id == user?.id);\r\n\r\n        console.log(\"EMIT DE NEXTTURN\")\r\n\r\n        socket.emit('nextTurnGeneral', {\r\n            roomUUID: game.uuid,\r\n            user_id: currentIndex?.user_id,\r\n            points: currentIndex?.localPoints\r\n        });\r\n\r\n        setTimer(game.max_time);\r\n\r\n    };\r\n\r\n    function sumRound() {\r\n        if (roundCount >= maxRound) {\r\n            setGameStarted(false);\r\n            setTimer(0);\r\n            if (!gameStarted) {\r\n                console.log(\"adios\");\r\n                console.log(\"NOS VAMOS A ENDGAME\")\r\n                endGame();\r\n            }\r\n        } else {\r\n\r\n            if (myTurn) {\r\n                let jsonData = {\r\n                    uuid: params.uuid,\r\n                    round: roundCount\r\n                }\r\n\r\n                nextPlayer();\r\n\r\n                console.log(\"EMIT DE SIGUIENTE RONDA\")\r\n                socket.emit('roundRoom', jsonData);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const startGame = () => {\r\n\r\n        console.log(\"EMIT DE GETTURN\");\r\n        socket.emit('getTurn', ({roomUUID: params.uuid}));\r\n        setGameStarted(true);\r\n        if (maxRound > 0) {\r\n            randomWord();\r\n        } else {\r\n            console.log(\"Esperando a recibir el número máximo de rondas...\");\r\n        }\r\n    };\r\n\r\n    function sumaPointPlayer() {\r\n        // Actualización de puntos y siguiente turno\r\n        setPlayers(prevPlayers =>\r\n            prevPlayers.map(player =>\r\n                player.isActive ? {...player, localPoints: player.localPoints + 10} : player\r\n            )\r\n        );\r\n\r\n        setLocalPlayer(prev => ({\r\n            ...prev,\r\n            localPoints: prev.localPoints + 1\r\n        }));\r\n\r\n\r\n        setOldWord(null);\r\n\r\n        sumRound();\r\n\r\n    }\r\n\r\n    function randomWord() {\r\n        if (maxRound && roundCount < maxRound) {\r\n            setWordTranslate(\"\");\r\n            console.log(\"EMIT DE RANDOM WORLD\");\r\n            socket.emit('randomWord', {uuid: params.uuid});\r\n        } else if (maxRound) {\r\n            console.log(\"Juego terminado, no se generarán más palabras.\");\r\n            setGameStarted(false);\r\n            endGame();\r\n        } else {\r\n            console.log(\"maxRound no está definido aún.\");\r\n        }\r\n    }\r\n\r\n    function restaPointsPlayer() {\r\n\r\n        setPlayers(prevPlayers =>\r\n            prevPlayers.map(player =>\r\n                ({...player})\r\n            )\r\n        );\r\n\r\n        setPlayers(prevPlayers =>\r\n            prevPlayers.map(player =>\r\n                player.isActive ? {...player, localPoints: player.localPoints - 5} : player\r\n            )\r\n        );\r\n\r\n        sumRound();\r\n\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (!isAuthenticated) {\r\n            router.push(\"/authenticate/login\");\r\n            return;\r\n        }\r\n\r\n        setRoom(game);\r\n\r\n        if (!gameStarted) {\r\n\r\n            startGame();\r\n        }\r\n\r\n        setPlayers(participants.map(participant => ({\r\n            ...participant,\r\n            isActive: false,\r\n            localPoints: 0\r\n        })));\r\n\r\n        setLocalPlayer(participants.find(participant => participant.user.id === user?.id) as Player);\r\n\r\n\r\n        socket.on('turn', (data) => {\r\n            const {turn, errors} = data;\r\n\r\n            setPlayers(prevPlayers =>\r\n                prevPlayers.map((player) => ({\r\n                    ...player,\r\n                    isActive: player.user_id === turn.user_id\r\n                }))\r\n            );\r\n\r\n            setTimeout(() => {\r\n                setMyTurn(turn.user_id === user?.id)\r\n            }, 1000); // 3 segundos antes de cambiar de palabra\r\n\r\n\r\n            setTimer(data.game.max_time);\r\n        });\r\n\r\n        socket.on('wordRoom', (data) => {\r\n\r\n            if (data && data.word) {\r\n                setPalabraActual(data.word);\r\n                setOldWord(data.word);\r\n            } else {\r\n                console.warn(\"No se recibió una palabra válida.\");\r\n            }\r\n        });\r\n\r\n        socket.on('translateClient', (data) => {\r\n            if (data.word_translate && data.word_translate.toLowerCase() === data.word) {\r\n                setWordClient(data.word_input);\r\n                setAcertado(true);\r\n                setWordTranslate(data.word_translate);\r\n                setRespuesta('')\r\n                setCorrectMessage('¡Correcto sigue asi!')\r\n                // Clear error message after 3 seconds\r\n                setTimeout(() => {\r\n                    setCorrectMessage(null);\r\n                }, 1000);\r\n\r\n                // Mostrar la palabra con la traducción durante 3 segundos antes de cambiar\r\n                setTimeout(() => {\r\n                    setCorrectMessage(null);\r\n                    setAcertado(false);\r\n                    randomWord();\r\n                }, 1000); // 3 segundos antes de cambiar de palabra\r\n\r\n            } else {\r\n                // Add error message when translation is incorrect\r\n                setErrorMessage(\"¡Te has equivocado! Intenta de nuevo.\");\r\n                // Clear error message after 3 seconds\r\n                setTimeout(() => {\r\n                    setErrorMessage(null);\r\n                }, 1000);\r\n                setRespuesta('');\r\n                setAcertado(false);\r\n                console.log(\"Respuesta incorrecta o palabra no encontrada\");\r\n            }\r\n        });\r\n\r\n        socket.on('countRound', (data) => {\r\n            console.log(\"RONDAS: \", data);\r\n            setRoundCount(data.round);\r\n        });\r\n\r\n\r\n        return () => {\r\n            socket.off('wordRoom');\r\n            socket.off('translateClient');\r\n            socket.off('turn');\r\n            socket.off('countRound');\r\n        };\r\n\r\n    }, [isAuthenticated, router]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        let interval: NodeJS.Timeout;\r\n\r\n        if (gameStarted && timer > 0) {\r\n            interval = setInterval(() => {\r\n                setTimer((prev) => prev - 1);\r\n            }, 1000);\r\n        } else if (timer === 0) {\r\n\r\n            // Si no, seguir con el contador normal\r\n            restaPointsPlayer();\r\n        }\r\n\r\n        return () => clearInterval(interval);\r\n\r\n    }, [gameStarted, timer])\r\n\r\n    const inputResolve = async (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        const language = \"de\"\r\n        try {\r\n            if (respuesta.trim() == '') {\r\n                setErrorMessage(\"No puedes enviar vacio\")\r\n                setTimeout(() => {\r\n                    setErrorMessage(null)\r\n                }, 1000)\r\n            } else {\r\n                //const responseApi = await fetch(`/api/openai-translate?word=${respuesta.toLowerCase()}&language=${language}`);\r\n                const jsonData = {\r\n                    word: respuesta.toLowerCase(),\r\n                    source: auto,\r\n                    target: language,\r\n                }\r\n\r\n                const response = await apiRequest('/lara/translate', \"POST\", jsonData);\r\n\r\n                const data = await response.result;\r\n\r\n                const jsonSocket = {\r\n                    uuid: params.uuid,\r\n                    word: palabraActual,\r\n                    word_translate: data.translation,\r\n                    word_input: respuesta.toLowerCase(),\r\n                }\r\n\r\n                if (data.translation.toLowerCase() === palabraActual) {\r\n                    if (myTurn) {\r\n                        sumaPointPlayer();\r\n                    }\r\n\r\n                } else {\r\n                    if (myTurn) {\r\n                        restaPointsPlayer();\r\n                    }\r\n                }\r\n\r\n                console.log(\"Enviant chatTranslate:\", jsonSocket);\r\n                socket.emit('chatTranslate', (jsonSocket));\r\n\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error al obtener la traducción:\", error);\r\n        }\r\n\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"min-h-screen flex flex-col items-center p-4\">\r\n\r\n            <div\r\n                className=\"absolute top-1 right-5 rounded-full gap-2 flex items-center text-black bg-white px-4 py-2 bg-opacity-25\">\r\n                <Clock3 className=\"w-6 h-6\"/>\r\n                <span className=\"text-2xl font-bold\">{timer}s</span>\r\n            </div>\r\n\r\n            <div\r\n                className=\"absolute top-1 right-120 rounded-full gap-2 flex items-center content-center text-black bg-white px-4 py-2 bg-opacity-25\">\r\n                <span className=\"text-2xl font-bold\">{roundCount}/{maxRound}</span>\r\n            </div>\r\n\r\n            {/* Turn Messaging */}\r\n            {players.map(player => (\r\n                player.isActive ? (\r\n                    player.user_id === user?.id ? (\r\n                        <div key={player.id}\r\n                             className=\"text-center mb-4 absolute top-2 left-3 bg-white rounded-full px-4 py-2\">\r\n                            <span className=\"text-1xl font-bold text-green-600\">¡Es tu turno!</span>\r\n                        </div>\r\n                    ) : (\r\n                        <div key={player.id}\r\n                             className=\"text-center mb-4 absolute top-2 left-3 bg-white rounded-full px-4 py-2\">\r\n                                <span\r\n                                    className=\"text-1xl font-bold text-blue-600\">Turno de {player.user.username}</span>\r\n                        </div>\r\n                    )\r\n                ) : null\r\n            ))}\r\n\r\n\r\n            {/* Error Message Section */}\r\n            {myTurn && errorMessage && (\r\n                <div className=\"fixed top-4 left-1/2 transform -translate-x-1/2 z-50\r\n                bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg\r\n                animate-bounce\">\r\n                    {errorMessage}\r\n                </div>\r\n            )}\r\n\r\n            {myTurn && correctMessage && (\r\n                <div className=\"fixed top-4 left-1/2 transform -translate-x-1/2 z-50\r\n                    bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg\r\n                    animate-bounce\">\r\n                    {correctMessage}\r\n                </div>\r\n            )}\r\n\r\n            <h1 className=\"text-4xl text-center font-bold mb-6 mt-9 text-white-600\">\r\n                Juego de Traducciones\r\n            </h1>\r\n\r\n            <div className=\"w-full max-w-3xl border border-white p-6 rounded-lg shadow-lg\">\r\n                {/* Sección de Participantes */}\r\n                <section className=\"mb-6\">\r\n                    <h2 className=\"text-2xl font-semibold mb-4 text-blakc-800\">Participantes</h2>\r\n                    {players.length > 0 ? (\r\n                        <ul className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\r\n                            {players.map((p: Participant) => (\r\n                                <li\r\n                                    key={p.id}\r\n                                    className=\"flex items-center bg-blue-800 rounded-lg p-3 shadow-sm\">\r\n                                    <img\r\n                                        src={p.user.profile_pic}\r\n                                        alt={p.user.name}\r\n                                        className=\"w-12 h-12 rounded-full mr-3\"\r\n                                    />\r\n                                    <span className=\"text-lg font-medium\">{p.user.username}</span>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    ) : (\r\n                        <p className=\"text-gray-500\">No hay participantes.</p>\r\n                    )}\r\n                </section>\r\n\r\n                {/* Sección de Palabra a Resolver */}\r\n                <section className=\"mb-6\">\r\n                    <h2 className=\"text-2xl font-semibold mb-4 text-white-50\">Palabra a Resolver</h2>\r\n                    <div\r\n                        className=\"bg-blue-100 text-blue-800 p-4 text-xl font-semibold text-center rounded-lg shadow\">\r\n                        {palabraActual ? palabraActual : \"Cargando palabra...\"}\r\n                    </div>\r\n\r\n                    <h4 className=\"text-lg font-semibold mt-4\">Traducción</h4>\r\n                    <p className=\"text-lg font-semibold text-center bg-green-100 text-green-800 p-2 rounded-lg shadow\">\r\n                        {acertado ? `${palabraActual} = ${worldClient}` : \"______\"}\r\n                    </p>\r\n                </section>\r\n\r\n                {/* Sección de Chat */}\r\n                <section>\r\n                    <h2 className=\"text-2xl font-semibold mb-4 text-white-50\">Chat</h2>\r\n                    <div className=\"flex flex-col sm:flex-row gap-2\">\r\n                        <input\r\n                            className=\"flex-1 px-4 py-2 border rounded-lg shadow focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                            value={respuesta}\r\n                            onChange={(e) => setRespuesta(e.target.value)}\r\n                            type=\"text\"\r\n                            placeholder=\"Escribe la traducción\"\r\n                            {...(myTurn ? {autoFocus: true, disabled: false} : {disabled: true})}\r\n                        />\r\n                        <button\r\n                            className=\"bg-blue-500 text-white px-6 py-2 rounded-lg shadow hover:bg-blue-600 transition\"\r\n                            onClick={inputResolve}\r\n                            {...(myTurn ? {autoFocus: true, disabled: false} : {disabled: true})}\r\n                        >\r\n                            Enviar\r\n                        </button>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default TranslationGameComponent;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/play2learn/src/app/games/translation/[uuid]/TranslationGameComponent.tsx b/play2learn/src/app/games/translation/[uuid]/TranslationGameComponent.tsx
--- a/play2learn/src/app/games/translation/[uuid]/TranslationGameComponent.tsx	(revision eed0fe00932a0a802f387ee61eae78b294ae895f)
+++ b/play2learn/src/app/games/translation/[uuid]/TranslationGameComponent.tsx	(date 1743345746079)
@@ -77,30 +77,26 @@
     const [myTurn, setMyTurn] = useState(false);
     const [roundCount, setRoundCount] = useState(0);
     const [maxRound, setMaxRound] = useState(game.n_rounds || 0);
+    const [gameEnded, setGameEnded] = useState(false);
 
 
     const endGame = () => {
+        if (gameEnded) return; // Evita múltiples ejecuciones
+        setGameEnded(true);
 
         console.log("Ronda actual:", roundCount, "/", maxRound);
 
         if (participants.find((p) => p.rol === 'host')?.user_id === user?.id) {
-            // Primero realiza la llamada a la API con los datos simplificados
             apiRequest("/game/store/stats", "POST", {players: players})
                 .then((response) => {
                     console.log(response);
                     console.log("EMIT DE SHOWLEADER");
 
-                    // Luego envía solo los datos necesarios a través de socket.io
                     socket.emit("showLeader", {token: token, roomUUID: game.uuid});
-
-                    console.log("todos terminaron");
+                    console.log("Todos terminaron");
                 })
-                .catch((error) => {
-                    console.log(error);
-                });
-
+                .catch((error) => console.log(error));
         }
-        return;
     };
 
     function nextPlayer() {
@@ -129,26 +125,22 @@
         if (roundCount >= maxRound) {
             setGameStarted(false);
             setTimer(0);
-            if (!gameStarted) {
-                console.log("adios");
-                console.log("NOS VAMOS A ENDGAME")
+            if (!gameEnded) {
+                console.log("Nos vamos a ENDGAME");
                 endGame();
             }
         } else {
-
             if (myTurn) {
                 let jsonData = {
                     uuid: params.uuid,
                     round: roundCount
-                }
+                };
 
                 nextPlayer();
-
-                console.log("EMIT DE SIGUIENTE RONDA")
+                console.log("EMIT DE SIGUIENTE RONDA");
                 socket.emit('roundRoom', jsonData);
             }
         }
-
     }
 
     const startGame = () => {
@@ -224,8 +216,7 @@
 
         setRoom(game);
 
-        if (!gameStarted) {
-
+        if (!gameStarted && !gameEnded) {
             startGame();
         }
 
@@ -311,7 +302,7 @@
             socket.off('countRound');
         };
 
-    }, [isAuthenticated, router]);
+    }, [isAuthenticated, router, gameStarted, gameEnded]);
 
 
     useEffect(() => {
Index: back/websockets/Controllers/SocketController.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const apiRequest = require(\"../apiRequest\");\r\n\r\nclass SocketController {\r\n    static initialize(io) {\r\n        let users = [];\r\n        let confGame = [];\r\n\r\n        const WORDS = [\r\n            \"apple\",\r\n            \"banana\",\r\n            \"cherry\",\r\n            \"date\",\r\n            \"elderberry\",\r\n            \"fig\",\r\n            \"grape\",\r\n        ];\r\n\r\n        let words = [\r\n            \"hallo\",\r\n            \"bitte\",\r\n            \"danke\",\r\n            \"entschuldigung\",\r\n            \"ja\",\r\n            \"nein\",\r\n            \"freund\",\r\n            \"liebe\",\r\n            \"essen\",\r\n            \"trinken\"\r\n        ];\r\n\r\n        function getTurnGame(roomUUID) {\r\n            const game = confGame.find((game) => game.room === roomUUID);\r\n            if (!game) return null;\r\n\r\n            return game.players[(game.turn - 1) % game.players.length];\r\n        }\r\n\r\n        function startTurnTimer(roomUUID, maxTime) {\r\n            const game = confGame.find((game) => game.room === roomUUID);\r\n            if (!game) {\r\n                console.error(\"Room not found\");\r\n                return;\r\n            }\r\n\r\n            // Si existe un timer anterior, lo detenemos\r\n            if (game.timer) {\r\n                clearInterval(game.timer);\r\n                game.timer = null;\r\n            }\r\n\r\n            let remainingTime = maxTime;\r\n            // Notificar el tiempo inicial\r\n            io.to(roomUUID).emit(\"timerTick\", remainingTime);\r\n\r\n            game.timer = setInterval(() => {\r\n                remainingTime--;\r\n\r\n                if (remainingTime <= 0) {\r\n                    clearInterval(game.timer);\r\n                    game.timer = null;\r\n                    io.to(roomUUID).emit(\"timerEnded\");\r\n\r\n                    // Avanza al siguiente turno\r\n                    game.turn++;\r\n                    io.to(roomUUID).emit(\"turn\", {\r\n                        turn: getTurnGame(roomUUID),\r\n                        errors: game.guessesErrors,\r\n                    });\r\n\r\n                    // Reiniciamos el timer para el nuevo turno\r\n                    startTurnTimer(roomUUID, maxTime);\r\n                } else {\r\n                    io.to(roomUUID).emit(\"timerTick\", remainingTime);\r\n                }\r\n            }, 1000);\r\n        }\r\n\r\n        io.on(\"connection\", (socket) => {\r\n            console.log(\"A user connected\");\r\n            users.push({id: socket.id, room: null});\r\n\r\n            socket.on(\"startGame\", async ({token, roomUUID}) => {\r\n                const response = await apiRequest(\"/games/start\", token, \"POST\", {\r\n                    roomUUID,\r\n\r\n                });\r\n                const sortedTurns = response.data.participants.sort(\r\n                    () => Math.random() - 0.5\r\n                );\r\n\r\n                response.data.participants = sortedTurns;\r\n\r\n                confGame.push({\r\n                    room: roomUUID,\r\n                    turn: 1,\r\n                    players: sortedTurns,\r\n                    guessesErrors: 0,\r\n                    game_num_random: Math.floor(Math.random() * 10),\r\n                    game_num_rounds: 1,\r\n                    game_time_max: response.data.max_time,\r\n                    game: response.data,\r\n                    showLeader: false\r\n                });\r\n\r\n                io.to(roomUUID).emit(\"gameStarted\", response);\r\n            });\r\n\r\n            socket.on(\"setLobbies\", async ({token, game}) => {\r\n                const response = await apiRequest(\"/games/store\", token, \"POST\", game);\r\n                // console.log(response);\r\n                // Crear y unirse a la sala con el UUID del juego\r\n                const roomUUID = response.gameCreated.uuid;\r\n                socket.join(roomUUID);\r\n                users.find((user) => user.id === socket.id).room = roomUUID;\r\n                // Emitir a todos los demás clientes\r\n                socket.broadcast.emit(\"getLobbies\", response);\r\n                // Emitir al socket actual con datos personalizados\r\n                socket.emit(\"lobbieCreated\", response);\r\n            });\r\n\r\n\r\n            socket.on(\"joinRoom\", async ({token, roomUUID}) => {\r\n                socket.join(roomUUID);\r\n                users.find((user) => user.id === socket.id).room = roomUUID;\r\n                const response = await apiRequest(\r\n                    \"/games/join/\" + roomUUID,\r\n                    token,\r\n                    \"GET\"\r\n                );\r\n                // console.log(response);\r\n                io.to(roomUUID).emit(\"playerJoined\", response);\r\n                io.emit(\"getLobbies\", response);\r\n            });\r\n\r\n            socket.on('roundRoom', async (data) => {\r\n                console.log(\"Contador\", data)\r\n                let game = confGame.find((game) => game.room === data.uuid);\r\n\r\n                if (!game) {\r\n                    console.log(\"Game not found\");\r\n                    return;\r\n                }\r\n\r\n                data.round++;\r\n\r\n                io.to(data.uuid).emit('countRound', data);\r\n\r\n            });\r\n\r\n            socket.on('randomWord', async (data) => {\r\n                let game = confGame.find((game) => game.room === data.uuid);\r\n                if (!game) {\r\n                    console.log(\"Game not found\");\r\n                    return;\r\n                }\r\n\r\n                const randomIndex = Math.floor(Math.random() * words.length);\r\n                const word = words[randomIndex];\r\n\r\n                // Guarda la palabra en la configuración de la partida\r\n                game.currentWord = word;\r\n\r\n                console.log(`Nueva palabra para la sala ${data.uuid}: ${word}`);\r\n\r\n                io.to(data.uuid).emit('wordRoom', {word});\r\n            });\r\n\r\n            socket.on(\"getGame\", async ({token, roomUUID}) => {\r\n                socket.join(roomUUID);\r\n                users.find((user) => user.id === socket.id).room = roomUUID;\r\n\r\n                const response = await apiRequest(\"/games/\" + roomUUID, token, \"GET\");\r\n                // console.log(response);\r\n                const filterGame = confGame.find((game) => game.room === roomUUID);\r\n                if (filterGame) {\r\n                    response.game_num_random = filterGame.game_num_random;\r\n                    response.showLeader = filterGame.showLeader;\r\n                }\r\n\r\n                io.to(roomUUID).emit(\"playerJoined\", response);\r\n                io.to(roomUUID).emit(\"inGame\", response);\r\n            });\r\n\r\n            socket.on('chatTranslate', (data) => {\r\n                console.log(\"Mensaje del chat\", data);\r\n                io.to(data.uuid).emit('translateClient', data);\r\n            });\r\n\r\n\r\n            socket.on(\"lobbie\", async ({token}) => {\r\n                const response = await apiRequest(\"/games\", token);\r\n                socket.emit(\"getLobbies\", response);\r\n            });\r\n\r\n            socket.on(\"leaveGame\", async ({token, roomUUID}) => {\r\n                socket.leave(roomUUID);\r\n                const response = await apiRequest(\r\n                    \"/games/leave/\" + roomUUID,\r\n                    token,\r\n                    \"GET\"\r\n                );\r\n                console.log(response);\r\n                if (response.game) {\r\n                    io.to(roomUUID).emit(\"playerJoined\", response);\r\n                    io.emit(\"getLobbies\", response);\r\n                } else {\r\n                    io.to(roomUUID).emit(\"gameDeleted\", {game: null});\r\n                    io.emit(\"getLobbies\", response);\r\n                }\r\n            });\r\n\r\n            socket.on(\"getWordHangman\", async ({roomUUID}) => {\r\n                const game = confGame.find((game) => game.room === roomUUID);\r\n                if (!game) {\r\n                    console.error(\"Room not found\");\r\n                    return;\r\n                }\r\n\r\n                if (!game.historyWords) {\r\n                    game.historyWords = [];\r\n                }\r\n\r\n                let word;\r\n                do {\r\n                    word = WORDS[Math.floor(Math.random() * WORDS.length)];\r\n                } while (game.historyWords.includes(word));\r\n\r\n                game.historyWords.push(word);\r\n                io.to(roomUUID).emit(\"wordHangman\", word);\r\n            });\r\n\r\n            socket.on(\"getTurn\", ({roomUUID}) => {\r\n                const game = confGame.find((game) => game.room === roomUUID);\r\n                if (!game) {\r\n                    console.error(\"Room not found\");\r\n                    return;\r\n                }\r\n\r\n                console.log(\"GET TURN: \", game);\r\n\r\n                io.to(roomUUID).emit(\"turn\", {\r\n                    turn: getTurnGame(roomUUID),\r\n                    errors: game.guessesErrors,\r\n                    game: game.game\r\n                });\r\n            });\r\n\r\n            socket.on(\"nextTurnGeneral\", ({roomUUID, user_id, points}) => {\r\n                console.log(\"FRONT TURN\", {roomUUID, user_id, points});\r\n                const game = confGame.find((game) => game.room === roomUUID);\r\n\r\n\r\n                if (!game) {\r\n                    console.error(\"Room not found\");\r\n                    return;\r\n                }\r\n\r\n                game.turn++;\r\n                game.players.find((player) => player.user_id === user_id).points += points;\r\n\r\n                console.log(\"TURNOS SOCKET NUEVO: \", getTurnGame(roomUUID))\r\n\r\n                io.to(roomUUID).emit(\"turn\", {\r\n                    turn: getTurnGame(roomUUID),\r\n                    errors: game.guessesErrors,\r\n                    game: game.game\r\n                });\r\n\r\n                startTurnTimer(roomUUID, game.max_time);\r\n            });\r\n\r\n            socket.on('nextGame', ({roomUUID}) => {\r\n                const game = confGame.find((game) => game.room === roomUUID);\r\n                if (!game) {\r\n                    console.error(\"Room not found\");\r\n                    return;\r\n                }\r\n\r\n                game.showLeader = false;\r\n\r\n                if (game.game_num_rounds === game.game.n_rounds || game.game_num_rounds > game.game.n_rounds) {\r\n                    //logic for update and insert result games finish\r\n\r\n                    console.log(\"se termino la partida\")\r\n                    game.game_num_random = null;\r\n                    game.game_num_rounds = null;\r\n                    io.to(roomUUID).emit(\"chargeGame\", game);\r\n                    return;\r\n                } else {\r\n                    game.game_num_rounds++;\r\n                }\r\n\r\n                let num = Math.floor(Math.random() * 10);\r\n                if (num === game.game_num_random) {\r\n                    if (num === 10) {\r\n                        num = 0;\r\n                    } else {\r\n                        num++;\r\n                    }\r\n                }\r\n\r\n                game.game_num_random = num;\r\n\r\n                io.to(roomUUID).emit(\"chargeGame\", game);\r\n            });\r\n\r\n            socket.on('showLeader', async ({token, roomUUID}) => {\r\n                console.log(\"FRONT\", {token, roomUUID})\r\n                const game = confGame.find((game) => game.room === roomUUID);\r\n                if (!game) {\r\n                    console.error(\"Room not found\");\r\n                    return;\r\n                }\r\n                console.log(\"showLeader\")\r\n                game.showLeader = true;\r\n\r\n                const response = await apiRequest(\"/games/\" + roomUUID, token, \"GET\");\r\n\r\n                console.log(\"APIIIIIII\", response);\r\n\r\n\r\n\r\n                io.to(roomUUID).emit(\"leader\", game);\r\n                io.to(roomUUID).emit(\"participantsLoaders\", response);\r\n            });\r\n\r\n            socket.on(\"getGame\", async ({token, roomUUID}) => {\r\n                socket.join(roomUUID);\r\n                users.find((user) => user.id === socket.id).room = roomUUID;\r\n\r\n                const response = await apiRequest(\"/games/\" + roomUUID, token, \"GET\");\r\n                // console.log(response);\r\n                const filterGame = confGame.find((game) => game.room === roomUUID);\r\n                if (filterGame) {\r\n                    response.game_num_random = filterGame.game_num_random;\r\n                }\r\n                io.to(roomUUID).emit(\"playerJoined\", response);\r\n                io.to(roomUUID).emit(\"inGame\", response);\r\n            });\r\n\r\n            //game sockets\r\n            socket.on('lastWord', ({roomUUID, word}) => {\r\n                const game = confGame.find((game) => game.room === roomUUID);\r\n                if (!game) {\r\n                    console.error(\"Room not found\");\r\n                    return;\r\n                }\r\n\r\n                io.to(roomUUID).emit('word', {word});\r\n            });\r\n\r\n            socket.on(\"nextTurn\", ({roomUUID, acierto, letter}) => {\r\n                const game = confGame.find((game) => game.room === roomUUID);\r\n                if (!game) {\r\n                    console.error(\"Room not found\");\r\n                    return;\r\n                }\r\n\r\n                if (!acierto) {\r\n                    game.guessesErrors++;\r\n                }\r\n\r\n                if (game.timer) {\r\n                    clearInterval(game.timer);\r\n                    game.timer = null;\r\n                }\r\n\r\n                socket.broadcast.to(roomUUID).emit(\"letter\", letter);\r\n\r\n                game.turn++;\r\n                io.to(roomUUID).emit(\"turn\", {\r\n                    turn: getTurnGame(roomUUID),\r\n                    errors: game.guessesErrors,\r\n                });\r\n\r\n                startTurnTimer(roomUUID, game.time);\r\n            });\r\n\r\n            //game sockets cadenas encadenas-------------------------------\r\n            socket.on('lastWord', ({roomUUID, word}) => {\r\n                const game = confGame.find((game) => game.room === roomUUID);\r\n                if (!game) {\r\n                    console.error(\"Room not found\");\r\n                    return;\r\n                }\r\n\r\n                io.to(roomUUID).emit('word', {word});\r\n            });\r\n\r\n            socket.on(\"getTurnWordChain\", ({roomUUID}) => {\r\n                const game = confGame.find((game) => game.room === roomUUID);\r\n                if (!game) {\r\n                    console.error(\"Room not found\");\r\n                    return;\r\n                }\r\n\r\n                const turnPlayer = getTurnGame(roomUUID);\r\n\r\n                game.players = game.players.map(p => ({\r\n                    ...p,\r\n                    isActive: p.user_id === turnPlayer.user_id,\r\n                    word: '',\r\n                    localPoints: 0,\r\n                    time: game.game_time_max\r\n                }));\r\n\r\n                io.to(roomUUID).emit(\"turnWordChain\", {\r\n                    turn: getTurnGame(roomUUID),\r\n                    players: game.players,\r\n                    errors: game.guessesErrors,\r\n                });\r\n            });\r\n\r\n            socket.on(\"nextTurnWordChain\", ({roomUUID, points, timeRemaining, playerWord}) => {\r\n                const game = confGame.find(game => game.room === roomUUID);\r\n                if (!game) {\r\n                    console.error(\"Room not found\");\r\n                    return;\r\n                }\r\n\r\n                const activePlayer = game.players.find(p => p.isActive);\r\n                if (!activePlayer) {\r\n                    console.error(\"Active player not found\");\r\n                    return;\r\n                }\r\n\r\n                //cambia los datos del player que estaba jugando con sus resultados\r\n                game.players = game.players.map(p => {\r\n                    if (p.user_id === activePlayer.user_id) {\r\n                        return {\r\n                            ...p,\r\n                            word: playerWord,\r\n                            localPoints: p.localPoints + points,\r\n                            time: timeRemaining,\r\n                        };\r\n                    }\r\n                    return p;\r\n                });\r\n\r\n                //pasa al siguiente turno\r\n                game.turn++;\r\n\r\n                //seteamos de nuevo el turno\r\n                const turnPlayer = getTurnGame(roomUUID);\r\n                game.players = game.players.map(p => ({\r\n                    ...p,\r\n                    isActive: p.user_id === turnPlayer.user_id,\r\n                }));\r\n\r\n\r\n                io.to(roomUUID).emit(\"turnWordChain\", {\r\n                    turn: getTurnGame(roomUUID),\r\n                    players: game.players,\r\n                    errors: game.guessesErrors,\r\n                });\r\n            });\r\n\r\n            //game sockets cadenas encadenas--------------------------------\r\n\r\n            socket.on(\"startTimer\", ({roomUUID, maxTime}) => {\r\n                const game = confGame.find((game) => game.room === roomUUID);\r\n                if (!game) {\r\n                    console.error(\"Room not found\");\r\n                    return;\r\n                }\r\n                // Guarda el tiempo máximo en el juego para usarlo luego\r\n                game.time = maxTime;\r\n                startTurnTimer(roomUUID, maxTime);\r\n            });\r\n\r\n            socket.on(\"disconnect\", () => {\r\n                console.log(\"User disconnected\");\r\n                const user = users.find((user) => user.id === socket.id);\r\n                if (user.room) {\r\n                    io.to(user.room).emit(\"playerLeft\", {id: socket.id});\r\n                    socket.leave(user.room);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nmodule.exports = SocketController;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/back/websockets/Controllers/SocketController.js b/back/websockets/Controllers/SocketController.js
--- a/back/websockets/Controllers/SocketController.js	(revision eed0fe00932a0a802f387ee61eae78b294ae895f)
+++ b/back/websockets/Controllers/SocketController.js	(date 1743343041207)
@@ -324,19 +324,6 @@
                 io.to(roomUUID).emit("participantsLoaders", response);
             });
 
-            socket.on("getGame", async ({token, roomUUID}) => {
-                socket.join(roomUUID);
-                users.find((user) => user.id === socket.id).room = roomUUID;
-
-                const response = await apiRequest("/games/" + roomUUID, token, "GET");
-                // console.log(response);
-                const filterGame = confGame.find((game) => game.room === roomUUID);
-                if (filterGame) {
-                    response.game_num_random = filterGame.game_num_random;
-                }
-                io.to(roomUUID).emit("playerJoined", response);
-                io.to(roomUUID).emit("inGame", response);
-            });
 
             //game sockets
             socket.on('lastWord', ({roomUUID, word}) => {
@@ -376,16 +363,6 @@
                 startTurnTimer(roomUUID, game.time);
             });
 
-            //game sockets cadenas encadenas-------------------------------
-            socket.on('lastWord', ({roomUUID, word}) => {
-                const game = confGame.find((game) => game.room === roomUUID);
-                if (!game) {
-                    console.error("Room not found");
-                    return;
-                }
-
-                io.to(roomUUID).emit('word', {word});
-            });
 
             socket.on("getTurnWordChain", ({roomUUID}) => {
                 const game = confGame.find((game) => game.room === roomUUID);
Index: play2learn/src/app/games/[uuid]/ManagerGames.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"use client\";\r\nimport { useParams } from \"next/navigation\";\r\nimport { useEffect } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { useContext } from \"react\";\r\nimport { AuthenticatorContext } from \"@/contexts/AuthenticatorContext\";\r\nimport socket from \"@/services/websockets/socket\";\r\nimport { useState } from \"react\";\r\nimport WordChain from \"../WordChain\";\r\nimport LeaderGame from \"../LeaderGame\";\r\nimport TranslationGameComponent from \"@/app/games/translation/[uuid]/TranslationGameComponent\";\r\n\r\nexport default function ManagerGames() {\r\n  const params = useParams<{ uuid: string }>();\r\n  const { isAuthenticated, token } = useContext(AuthenticatorContext);\r\n  const router = useRouter();\r\n\r\n  interface Language {\r\n    id: number;\r\n    name: string;\r\n  }\r\n\r\n  interface LanguageLevel {\r\n    id: number;\r\n    language_id: number;\r\n    language: Language;\r\n    level: string;\r\n  }\r\n\r\n  interface User {\r\n    id: number;\r\n    name: string;\r\n    profile_pic: string;\r\n  }\r\n\r\n  interface Participant {\r\n    id: number;\r\n    user: User;\r\n    rol: string;\r\n    points: number;\r\n  }\r\n\r\n  interface Game {\r\n    id: number;\r\n    id_level_language: number;\r\n    language_level: LanguageLevel;\r\n    uuid: string;\r\n    password: string;\r\n    name: string;\r\n    n_rounds: number;\r\n    max_clues: number;\r\n    max_time: number;\r\n    max_players: number;\r\n    participants: Participant[] | null;\r\n  }\r\n\r\n  const [game, setGame] = useState<Game>({} as Game);\r\n  const [participants, setParticipants] = useState<Participant[]>([]);\r\n  const [randomGame, setRandomGame] = useState<number | null>(null);\r\n  const [leaderView, setLeaderView] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    if (!isAuthenticated) {\r\n      router.push(\"/authenticate/login\");\r\n      return;\r\n    }\r\n\r\n    socket.emit(\"getGame\", { token: token || \"\", roomUUID: params.uuid });\r\n\r\n    socket.on(\"inGame\", (data) => {\r\n      setGame(data.game || {} as Game);\r\n      setParticipants(data.game.participants || []);\r\n      setRandomGame(data.game_num_random);\r\n\r\n      setLeaderView(data.showLeader);\r\n    });\r\n\r\n    socket.on('chargeGame', (data) => {\r\n      console.log(data.game_num_rounds)\r\n      if (data.game_num_rounds !== null) {\r\n        setGame(data.game || {} as Game);\r\n        setParticipants(data.game.participants || []);\r\n        setRandomGame(data.game_num_random);\r\n        setLeaderView(data.showLeader);\r\n\r\n      } else {\r\n        router.push(`/games/${params.uuid}/finished`)\r\n      }\r\n    });\r\n\r\n    socket.on('participantsLoaders', (data) => {\r\n      console.log(\"HOLAAAAAAAAA\")\r\n      setParticipants(data.game.participants || []);\r\n    });\r\n\r\n    socket.on('leader', (data) => {\r\n      console.log(\"HOLAAAAAAAAA X 222222222\")\r\n      setLeaderView(data.showLeader);\r\n\r\n    })\r\n\r\n    // Limpiar event listeners\r\n    return () => {\r\n      socket.off(\"inGame\");\r\n      socket.off(\"chargeGame\");\r\n      socket.off(\"leader\");\r\n      socket.off(\"participantsLoaders\");\r\n    };\r\n  }, [isAuthenticated, router]);\r\n\r\n\r\n  if (!game.id || participants.length === 0) {\r\n    return <div>Loading...</div>;\r\n  } else if (leaderView) {\r\n    return <LeaderGame game={game} participants={participants} />;\r\n  }else {\r\n    return <TranslationGameComponent participants={participants} game={game} />;\r\n  }\r\n  \r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/play2learn/src/app/games/[uuid]/ManagerGames.tsx b/play2learn/src/app/games/[uuid]/ManagerGames.tsx
--- a/play2learn/src/app/games/[uuid]/ManagerGames.tsx	(revision eed0fe00932a0a802f387ee61eae78b294ae895f)
+++ b/play2learn/src/app/games/[uuid]/ManagerGames.tsx	(date 1743343344585)
@@ -97,7 +97,7 @@
       console.log("HOLAAAAAAAAA X 222222222")
       setLeaderView(data.showLeader);
 
-    })
+    });
 
     // Limpiar event listeners
     return () => {
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"41804f30-47ef-42fa-83dc-22d3ef51bfe3\" name=\"Changes\" comment=\"cambios\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/back/websockets/Controllers/SocketController.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/back/websockets/Controllers/SocketController.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/back/websockets/server.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/back/websockets/server.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/play2learn/src/app/games/[uuid]/ManagerGames.tsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/play2learn/src/app/games/[uuid]/ManagerGames.tsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/play2learn/src/app/games/translation/[uuid]/TranslationGameComponent.tsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/play2learn/src/app/games/translation/[uuid]/TranslationGameComponent.tsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/play2learn/src/services/websockets/socket.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/play2learn/src/services/websockets/socket.ts\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ComposerSettings\">\r\n    <execution />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"dev\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;Deraybcbc&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/inspedralbes/tr3-front-back-24-25-play2learn.git&quot;,\r\n    &quot;accountId&quot;: &quot;3ec5b09b-bf80-4635-afdf-1a2cfeac0c15&quot;\r\n  }\r\n}</component>\r\n  <component name=\"PhpWorkspaceProjectConfiguration\" interpreter_name=\"C:\\xampp\\php\\php.exe\" />\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 6\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2uUsp2ddR6lWLehkY2gWewiVGhU\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;game__translate&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/deray/Documents/Cosas/tr3-front-back-24-25-play2learn/play2learn/src/app/games/translation/[uuid]&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;ts.external.directory.path&quot;: &quot;F:\\\\DAW\\\\tr3-front-back-24-25-play2learn\\\\play2learn\\\\node_modules\\\\typescript\\\\lib&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\deray\\Documents\\Cosas\\tr3-front-back-24-25-play2learn\\play2learn\\src\\app\\games\\translation\\[uuid]\" />\r\n      <recent name=\"C:\\Users\\deray\\Documents\\Cosas\\tr3-front-back-24-25-play2learn\\play2learn\\src\\app\\games\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-PS-242.23339.16\" />\r\n        <option value=\"bundled-php-predefined-a98d8de5180a-90914f2295cb-com.jetbrains.php.sharedIndexes-PS-242.23339.16\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"41804f30-47ef-42fa-83dc-22d3ef51bfe3\" name=\"Changes\" comment=\"\" />\r\n      <created>1742314666999</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1742314666999</updated>\r\n      <workItem from=\"1742314668081\" duration=\"6960000\" />\r\n      <workItem from=\"1742593162753\" duration=\"5000\" />\r\n      <workItem from=\"1742756632954\" duration=\"1653000\" />\r\n      <workItem from=\"1742806533829\" duration=\"9725000\" />\r\n      <workItem from=\"1742990317421\" duration=\"1405000\" />\r\n      <workItem from=\"1743065801135\" duration=\"9174000\" />\r\n      <workItem from=\"1743328472101\" duration=\"10526000\" />\r\n      <workItem from=\"1743339532580\" duration=\"597000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"merge en mi rama desde dev para tener todo actualizado\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1742317676389</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1742317676389</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"retoquees para acabar el juego\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1743283074708</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1743283074708</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Merge y retoques que falta para hacer que acabe la partida\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1743288970509</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1743288970509</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"4\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"merge en mi rama desde dev para tener todo actualizado\" />\r\n    <MESSAGE value=\"Correos\" />\r\n    <MESSAGE value=\"Creacion de socker para iniciar la partida a todos los de la sala. Modificacion de eloquent para recibir la informacion de la sala.\" />\r\n    <MESSAGE value=\"arreglar puntos\" />\r\n    <MESSAGE value=\"retoquees para acabar el juego\" />\r\n    <MESSAGE value=\"Merge y retoques que falta para hacer que acabe la partida\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Merge y retoques que falta para hacer que acabe la partida\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision eed0fe00932a0a802f387ee61eae78b294ae895f)
+++ b/.idea/workspace.xml	(date 1743346354612)
@@ -7,10 +7,8 @@
     <list default="true" id="41804f30-47ef-42fa-83dc-22d3ef51bfe3" name="Changes" comment="cambios">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/back/websockets/Controllers/SocketController.js" beforeDir="false" afterPath="$PROJECT_DIR$/back/websockets/Controllers/SocketController.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/back/websockets/server.js" beforeDir="false" afterPath="$PROJECT_DIR$/back/websockets/server.js" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/play2learn/src/app/games/[uuid]/ManagerGames.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/play2learn/src/app/games/[uuid]/ManagerGames.tsx" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/play2learn/src/app/games/translation/[uuid]/TranslationGameComponent.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/play2learn/src/app/games/translation/[uuid]/TranslationGameComponent.tsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/play2learn/src/services/websockets/socket.ts" beforeDir="false" afterPath="$PROJECT_DIR$/play2learn/src/services/websockets/socket.ts" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -94,6 +92,7 @@
       <workItem from="1743065801135" duration="9174000" />
       <workItem from="1743328472101" duration="10526000" />
       <workItem from="1743339532580" duration="597000" />
+      <workItem from="1743343512429" duration="2723000" />
     </task>
     <task id="LOCAL-00001" summary="merge en mi rama desde dev para tener todo actualizado">
       <option name="closed" value="true" />
